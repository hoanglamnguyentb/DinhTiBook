import { type PropType } from 'vue';
import SimpleBar, { type Options } from 'simplebar';
export declare type SimplebarInstanceRef = SimpleBar | null;
export interface Props {
    tag: string;
    options: Options;
    onCreated(instance: SimpleBar): void;
    onScroll(event: Event): void;
    onWheel(event: WheelEvent): void;
}
declare const _default: import("vue").DefineComponent<{
    tag: {
        type: PropType<string>;
        default: string;
    };
    options: {
        type: PropType<SimpleBar.Options>;
        default: undefined;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    scroll: (event: Event) => void;
    wheel: (event: WheelEvent) => void;
    created: (instance: SimpleBar) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: PropType<string>;
        default: string;
    };
    options: {
        type: PropType<SimpleBar.Options>;
        default: undefined;
    };
}>> & {
    onScroll?: ((event: Event) => any) | undefined;
    onWheel?: ((event: WheelEvent) => any) | undefined;
    onCreated?: ((instance: SimpleBar) => any) | undefined;
}, {
    tag: string;
    options: SimpleBar.Options;
}>;
export default _default;
