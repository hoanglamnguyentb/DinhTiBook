{"version":3,"file":"internal.js","sources":["../src/AllDaySplitter.ts","../src/TimeColsAxisCell.tsx","../src/TimeBodyAxis.tsx","../src/TimeColsView.tsx","../src/TimeColsSlatsCoords.ts","../src/TimeColsSlatsBody.tsx","../src/TimeColsSlats.tsx","../src/TimeColsSeg.ts","../src/TimeColMoreLink.tsx","../src/seg-web.ts","../src/event-placement.ts","../src/TimeColEvent.tsx","../src/TimeCol.tsx","../src/TimeColsContent.tsx","../src/TimeCols.tsx","../src/DayTimeColsSlicer.ts","../src/DayTimeCols.tsx","../src/time-slat-meta.ts","../src/DayTimeColsView.tsx"],"sourcesContent":["import {\n  Splitter,\n  hasBgRendering,\n  EventDef,\n  DateSpan,\n} from '@fullcalendar/core/internal'\n\nexport class AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {},\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    if (dateSpan.allDay) {\n      return ['allDay']\n    }\n\n    return ['timed']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    if (!eventDef.allDay) {\n      return ['timed']\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay']\n    }\n\n    return ['allDay']\n  }\n}\n","import {\n  SlotLabelContentArg,\n} from '@fullcalendar/core'\nimport {\n  ViewContext,\n  createFormatter,\n  ViewContextType,\n  ContentContainer,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n} from '@fullcalendar/core/preact'\nimport { TimeSlatMeta } from './time-slat-meta.js'\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short',\n})\n\nexport function TimeColsAxisCell(props: TimeSlatMeta) {\n  let classNames = [\n    'fc-timegrid-slot',\n    'fc-timegrid-slot-label',\n    props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n  ]\n\n  return (\n    <ViewContextType.Consumer>\n      {(context: ViewContext) => {\n        if (!props.isLabeled) {\n          return (\n            <td className={classNames.join(' ')} data-time={props.isoTimeStr} />\n          )\n        }\n\n        let { dateEnv, options, viewApi } = context\n        let labelFormat = // TODO: fully pre-parse\n          options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n              createFormatter(options.slotLabelFormat)\n\n        let renderProps: SlotLabelContentArg = {\n          level: 0,\n          time: props.time,\n          date: dateEnv.toDate(props.date),\n          view: viewApi,\n          text: dateEnv.format(props.date, labelFormat),\n        }\n\n        return (\n          <ContentContainer\n            elTag=\"td\"\n            elClasses={classNames}\n            elAttrs={{\n              'data-time': props.isoTimeStr,\n            }}\n            renderProps={renderProps}\n            generatorName=\"slotLabelContent\"\n            generator={options.slotLabelContent || renderInnerContent}\n            classNameGenerator={options.slotLabelClassNames}\n            didMount={options.slotLabelDidMount}\n            willUnmount={options.slotLabelWillUnmount}\n          >\n            {(InnerContent) => (\n              <div className=\"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\">\n                <InnerContent\n                  elTag=\"div\"\n                  elClasses={[\n                    'fc-timegrid-slot-label-cushion',\n                    'fc-scrollgrid-shrink-cushion',\n                  ]}\n                />\n              </div>\n            )}\n          </ContentContainer>\n        )\n      }}\n    </ViewContextType.Consumer>\n  )\n}\n\nfunction renderInnerContent(props) { // TODO: add types\n  return props.text\n}\n","import { BaseComponent } from '@fullcalendar/core/internal'\nimport { createElement } from '@fullcalendar/core/preact'\nimport { TimeColsAxisCell } from './TimeColsAxisCell.js'\nimport { TimeSlatMeta } from './time-slat-meta.js'\n\n/* Thin Axis\n------------------------------------------------------------------------------------------------------------------*/\n\ninterface TimeBodyAxisProps {\n  slatMetas: TimeSlatMeta[]\n}\n\nexport class TimeBodyAxis extends BaseComponent<TimeBodyAxisProps> { // just <tr> content\n  render() {\n    return this.props.slatMetas.map((slatMeta: TimeSlatMeta) => (\n      <tr key={slatMeta.key}>\n        <TimeColsAxisCell {...slatMeta} />\n      </tr>\n    ))\n  }\n}\n","import { CssDimValue, AllDayContentArg } from '@fullcalendar/core'\nimport {\n  diffDays,\n  SimpleScrollGridSection,\n  SimpleScrollGrid,\n  ChunkContentCallbackArgs,\n  ScrollGridSectionConfig,\n  buildNavLinkAttrs,\n  ViewContainer,\n  WeekNumberContainer,\n  DateComponent,\n  ViewProps,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  createFormatter,\n  NowTimer,\n  DateMarker,\n  NowIndicatorContainer,\n  ContentContainer,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n  createRef,\n  VNode,\n  RefObject,\n  ComponentChild,\n} from '@fullcalendar/core/preact'\nimport { AllDaySplitter } from './AllDaySplitter.js'\nimport { TimeSlatMeta } from './time-slat-meta.js'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords.js'\nimport { TimeBodyAxis } from './TimeBodyAxis.js'\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' })\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5\n\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeCols subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\ninterface TimeColsViewState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\nexport abstract class TimeColsView extends DateComponent<ViewProps, TimeColsViewState> {\n  protected allDaySplitter = new AllDaySplitter() // for use by subclasses\n\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n  private rootElRef: RefObject<HTMLElement> = createRef<HTMLElement>()\n  private scrollerElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n\n  state = {\n    slatCoords: null,\n  }\n\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n  renderSimpleLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n  ) {\n    let { context, props } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: { content: allDayContent },\n      })\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent,\n      },\n    })\n\n    return (\n      <ViewContainer elRef={this.rootElRef} elClasses={['fc-timegrid']} viewSpec={context.viewSpec}>\n        <SimpleScrollGrid\n          liquid={!props.isHeightAuto && !props.forPrint}\n          collapsibleWidth={props.forPrint}\n          cols={[{ width: 'shrink' }]}\n          sections={sections}\n        />\n      </ViewContainer>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    colCnt: number,\n    dayMinWidth: number,\n    slatMetas: TimeSlatMeta[],\n    slatCoords: TimeColsSlatsCoords | null, // yuck\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { context, props } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (arg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderHeadAxis('day', arg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent,\n          },\n        ],\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (contentArg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderTableRowAxis(contentArg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            content: allDayContent,\n          },\n        ],\n      })\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              colSpan={2}\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    let isNowIndicator = context.options.nowIndicator\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [\n        {\n          key: 'axis',\n          content: (arg) => (\n            // TODO: make this now-indicator arrow more DRY with TimeColsContent\n            <div className=\"fc-timegrid-axis-chunk\">\n              <table aria-hidden style={{ height: arg.expandRows ? arg.clientHeight : '' }}>\n                {arg.tableColGroupNode}\n                <tbody>\n                  <TimeBodyAxis slatMetas={slatMetas} />\n                </tbody>\n              </table>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                <NowTimer unit={isNowIndicator ? 'minute' : 'day' /* hacky */}>\n                  {(nowDate: DateMarker) => {\n                    let nowIndicatorTop =\n                      isNowIndicator &&\n                      slatCoords &&\n                      slatCoords.safeComputeTop(nowDate) // might return void\n\n                    if (typeof nowIndicatorTop === 'number') {\n                      return (\n                        <NowIndicatorContainer\n                          elClasses={['fc-timegrid-now-indicator-arrow']}\n                          elStyle={{ top: nowIndicatorTop }}\n                          isAxis\n                          date={nowDate}\n                        />\n                      )\n                    }\n\n                    return null\n                  }}\n                </NowTimer>\n              </div>\n            </div>\n          ),\n        },\n        {\n          key: 'cols',\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent,\n        },\n      ],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [\n          {\n            key: 'axis',\n            content: renderScrollShim,\n          },\n          {\n            key: 'cols',\n            content: renderScrollShim,\n          },\n        ],\n      })\n    }\n\n    return (\n      <ViewContainer elRef={this.rootElRef} elClasses={['fc-timegrid']} viewSpec={context.viewSpec}>\n        <ScrollGrid\n          liquid={!props.isHeightAuto && !props.forPrint}\n          collapsibleWidth={false}\n          colGroups={[\n            { width: 'shrink', cols: [{ width: 'shrink' }] }, // TODO: allow no specify cols\n            { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n          ]}\n          sections={sections}\n        />\n      </ViewContainer>\n    )\n  }\n\n  handleScrollTopRequest = (scrollTop: number) => {\n    let scrollerEl = this.scrollerElRef.current\n\n    if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n      scrollerEl.scrollTop = scrollTop\n    }\n  }\n\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  getAllDayMaxEventProps() {\n    let { dayMaxEvents, dayMaxEventRows } = this.context.options\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n      dayMaxEvents = undefined\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS // make sure \"auto\" goes to a real number\n    }\n\n    return { dayMaxEvents, dayMaxEventRows }\n  }\n\n  /* Header Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  renderHeadAxis = (rowKey: 'day' | string, frameHeight: CssDimValue = '') => {\n    let { options } = this.context\n    let { dateProfile } = this.props\n    let range = dateProfile.renderRange\n    let dayCnt = diffDays(range.start, range.end)\n\n    // only do in day views (to avoid doing in week views that dont need it)\n    let navLinkAttrs = (dayCnt === 1)\n      ? buildNavLinkAttrs(this.context, range.start, 'week')\n      : {}\n\n    if (options.weekNumbers && rowKey === 'day') {\n      return (\n        <WeekNumberContainer\n          elTag=\"th\"\n          elClasses={[\n            'fc-timegrid-axis',\n            'fc-scrollgrid-shrink',\n          ]}\n          elAttrs={{\n            'aria-hidden': true,\n          }}\n          date={range.start}\n          defaultFormat={DEFAULT_WEEK_NUM_FORMAT}\n        >\n          {(InnerContent) => (\n            <div\n              className={[\n                'fc-timegrid-axis-frame',\n                'fc-scrollgrid-shrink-frame',\n                'fc-timegrid-axis-frame-liquid',\n              ].join(' ')}\n              style={{ height: frameHeight }}\n            >\n              <InnerContent\n                elTag=\"a\"\n                elClasses={[\n                  'fc-timegrid-axis-cushion',\n                  'fc-scrollgrid-shrink-cushion',\n                  'fc-scrollgrid-sync-inner',\n                ]}\n                elAttrs={navLinkAttrs}\n              />\n            </div>\n          )}\n        </WeekNumberContainer>\n      )\n    }\n\n    return (\n      <th aria-hidden className=\"fc-timegrid-axis\">\n        <div className=\"fc-timegrid-axis-frame\" style={{ height: frameHeight }} />\n      </th>\n    )\n  }\n\n  /* Table Component Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n  // but DayGrid still needs to have classNames on inner elements in order to measure.\n  renderTableRowAxis = (rowHeight?: number) => {\n    let { options, viewApi } = this.context\n    let renderProps: AllDayContentArg = {\n      text: options.allDayText,\n      view: viewApi,\n    }\n\n    return (\n      // TODO: make reusable hook. used in list view too\n      <ContentContainer\n        elTag=\"td\"\n        elClasses={[\n          'fc-timegrid-axis',\n          'fc-scrollgrid-shrink',\n        ]}\n        elAttrs={{\n          'aria-hidden': true,\n        }}\n        renderProps={renderProps}\n        generatorName=\"allDayContent\"\n        generator={options.allDayContent || renderAllDayInner}\n        classNameGenerator={options.allDayClassNames}\n        didMount={options.allDayDidMount}\n        willUnmount={options.allDayWillUnmount}\n      >\n        {(InnerContent) => (\n          <div\n            className={[\n              'fc-timegrid-axis-frame',\n              'fc-scrollgrid-shrink-frame',\n              rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '',\n            ].join(' ')}\n            style={{ height: rowHeight }}\n          >\n            <InnerContent\n              elTag=\"span\"\n              elClasses={[\n                'fc-timegrid-axis-cushion',\n                'fc-scrollgrid-shrink-cushion',\n                'fc-scrollgrid-sync-inner',\n              ]}\n            />\n          </div>\n        )}\n      </ContentContainer>\n    )\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords) => {\n    this.setState({ slatCoords })\n  }\n}\n\nfunction renderAllDayInner(renderProps: AllDayContentArg): ComponentChild {\n  return renderProps.text\n}\n","import { Duration } from '@fullcalendar/core'\nimport {\n  PositionCache,\n  DateMarker,\n  startOfDay,\n  createDuration,\n  asRoughMs,\n  DateProfile,\n  rangeContainsMarker,\n} from '@fullcalendar/core/internal'\n\nexport class TimeColsSlatsCoords {\n  constructor(\n    public positions: PositionCache,\n    private dateProfile: DateProfile,\n    private slotDuration: Duration,\n  ) {\n  }\n\n  safeComputeTop(date: DateMarker) { // TODO: DRY with computeDateTop\n    let { dateProfile } = this\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date)\n      let timeMs = date.valueOf() - startOfDayDate.valueOf()\n\n      if (\n        timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n        timeMs < asRoughMs(dateProfile.slotMaxTime)\n      ) {\n        return this.computeTimeTop(createDuration(timeMs))\n      }\n    }\n\n    return null\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when: DateMarker, startOfDayDate?: DateMarker) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when)\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()))\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration: Duration): number {\n    let { positions, dateProfile } = this\n    let len = positions.els.length\n\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration)\n    let slatIndex\n    let slatRemainder\n\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage)\n    slatCoverage = Math.min(len, slatCoverage)\n\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage)\n    slatIndex = Math.min(slatIndex, len - 1)\n\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex\n\n    return positions.tops[slatIndex] +\n      positions.getHeight(slatIndex) * slatRemainder\n  }\n}\n","import {\n  SlotLaneContentArg,\n} from '@fullcalendar/core'\nimport {\n  BaseComponent,\n  ContentContainer,\n  RefMap,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n} from '@fullcalendar/core/preact'\nimport { TimeColsAxisCell } from './TimeColsAxisCell.js'\nimport { TimeSlatMeta } from './time-slat-meta.js'\n\nexport interface TimeColsSlatsBodyProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  slatElRefs: RefMap<HTMLTableRowElement>\n}\n\nexport class TimeColsSlatsBody extends BaseComponent<TimeColsSlatsBodyProps> {\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let { slatElRefs } = props\n\n    return (\n      <tbody>\n        {props.slatMetas.map((slatMeta, i) => {\n          let renderProps: SlotLaneContentArg = {\n            time: slatMeta.time,\n            date: context.dateEnv.toDate(slatMeta.date),\n            view: context.viewApi,\n          }\n\n          return (\n            <tr\n              key={slatMeta.key}\n              ref={slatElRefs.createRef(slatMeta.key)}\n            >\n              {props.axis && (\n                <TimeColsAxisCell {...slatMeta} />\n              )}\n              <ContentContainer\n                elTag=\"td\"\n                elClasses={[\n                  'fc-timegrid-slot',\n                  'fc-timegrid-slot-lane',\n                  !slatMeta.isLabeled && 'fc-timegrid-slot-minor',\n                ]}\n                elAttrs={{\n                  'data-time': slatMeta.isoTimeStr,\n                }}\n                renderProps={renderProps}\n                generatorName=\"slotLaneContent\"\n                generator={options.slotLaneContent}\n                classNameGenerator={options.slotLaneClassNames}\n                didMount={options.slotLaneDidMount}\n                willUnmount={options.slotLaneWillUnmount}\n              />\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n}\n","import { CssDimValue } from '@fullcalendar/core'\nimport {\n  BaseComponent,\n  RefMap,\n  PositionCache,\n  DateProfile,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n  VNode,\n  createRef,\n} from '@fullcalendar/core/preact'\nimport { TimeSlatMeta } from './time-slat-meta.js'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords.js'\nimport { TimeColsSlatsBody } from './TimeColsSlatsBody.js'\n\nexport interface TimeColsSlatsProps extends TimeColsSlatsContentProps {\n  dateProfile: DateProfile\n  clientWidth: number | null\n  minHeight: CssDimValue\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  onCoords?: (coords: TimeColsSlatsCoords | null) => void\n}\n\ninterface TimeColsSlatsContentProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\nexport class TimeColsSlats extends BaseComponent<TimeColsSlatsProps> {\n  private rootElRef = createRef<HTMLDivElement>()\n  private slatElRefs = new RefMap<HTMLTableRowElement>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <div ref={this.rootElRef} className=\"fc-timegrid-slots\">\n        <table\n          aria-hidden\n          className={context.theme.getClass('table')}\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n            height: props.minHeight,\n          }}\n        >\n          {props.tableColGroupNode /* relies on there only being a single <col> for the axis */}\n          <TimeColsSlatsBody\n            slatElRefs={this.slatElRefs}\n            axis={props.axis}\n            slatMetas={props.slatMetas}\n          />\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing()\n  }\n\n  componentDidUpdate() {\n    this.updateSizing()\n  }\n\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null)\n    }\n  }\n\n  updateSizing() {\n    let { context, props } = this\n\n    if (\n      props.onCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current\n\n      if (rootEl.offsetHeight) { // not hidden by css\n        props.onCoords(\n          new TimeColsSlatsCoords(\n            new PositionCache(\n              this.rootElRef.current,\n              collectSlatEls(this.slatElRefs.currentMap, props.slatMetas),\n              false,\n              true, // vertical\n            ),\n            this.props.dateProfile,\n            context.options.slotDuration,\n          ),\n        )\n      }\n    }\n  }\n}\n\nfunction collectSlatEls(elMap: { [key: string]: HTMLElement }, slatMetas: TimeSlatMeta[]) {\n  return slatMetas.map((slatMeta) => elMap[slatMeta.key])\n}\n","import { DateMarker, Seg, EventSegUiInteractionState } from '@fullcalendar/core/internal'\n\n// JUST A DATA STRUCTURE, not a component\n\nexport interface TimeColsSeg extends Seg {\n  col: number\n  start: DateMarker\n  end: DateMarker\n}\n\nexport function splitSegsByCol(segs: TimeColsSeg[] | null, colCnt: number) { // can be given null/undefined!\n  let segsByCol: TimeColsSeg[][] = []\n  let i\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([])\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i])\n    }\n  }\n\n  return segsByCol\n}\n\nexport function splitInteractionByCol(ui: EventSegUiInteractionState | null, colCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n","import { MoreLinkContentArg, CssDimValue } from '@fullcalendar/core'\nimport {\n  MoreLinkContainer, BaseComponent,\n  Dictionary, DateProfile, DateRange, DateMarker, EventSegUiInteractionState,\n} from '@fullcalendar/core/internal'\nimport { createElement } from '@fullcalendar/core/preact'\nimport { renderPlainFgSegs } from './TimeCol.js'\nimport { TimeColsSeg } from './TimeColsSeg.js'\n\nexport interface TimeColMoreLinkProps {\n  hiddenSegs: TimeColsSeg[]\n  top: CssDimValue\n  bottom: CssDimValue\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  nowDate: DateMarker\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState\n  eventResize: EventSegUiInteractionState\n}\n\nexport class TimeColMoreLink extends BaseComponent<TimeColMoreLinkProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <MoreLinkContainer\n        elClasses={['fc-timegrid-more-link']}\n        elStyle={{\n          top: props.top,\n          bottom: props.bottom,\n        }}\n        allDayDate={null}\n        moreCnt={props.hiddenSegs.length}\n        allSegs={props.hiddenSegs}\n        hiddenSegs={props.hiddenSegs}\n        extraDateSpan={props.extraDateSpan}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        popoverContent={() => renderPlainFgSegs(props.hiddenSegs, props)}\n        defaultGenerator={renderMoreLinkInner}\n      >\n        {(InnerContent) => (\n          <InnerContent\n            elTag=\"div\"\n            elClasses={['fc-timegrid-more-link-inner', 'fc-sticky']}\n          />\n        )}\n      </MoreLinkContainer>\n    )\n  }\n}\n\nfunction renderMoreLinkInner(props: MoreLinkContentArg) {\n  return props.shortText\n}\n","import {\n  SegEntry,\n  SegHierarchy,\n  SegRect,\n  buildEntryKey,\n  getEntrySpanEnd,\n  binarySearch,\n  SegEntryGroup,\n  groupIntersectingEntries,\n} from '@fullcalendar/core/internal'\n\ninterface SegNode extends SegEntry {\n  nextLevelNodes: SegNode[] // with highest-pressure first\n}\n\ntype SegNodeAndPressure = [ SegNode, number ]\n\ninterface SegSiblingRange { // will ALWAYS have span of 1 or more items. if not, will be null\n  level: number\n  lateralStart: number\n  lateralEnd: number\n}\n\nexport interface SegWebRect extends SegRect {\n  stackDepth: number\n  stackForward: number\n}\n\n// segInputs assumed sorted\nexport function buildPositioning(\n  segInputs: SegEntry[],\n  strictOrder?: boolean,\n  maxStackCnt?: number,\n): { segRects: SegWebRect[], hiddenGroups: SegEntryGroup[] } {\n  let hierarchy = new SegHierarchy()\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let hiddenGroups = groupIntersectingEntries(hiddenEntries)\n\n  let web = buildWeb(hierarchy)\n  web = stretchWeb(web, 1) // all levelCoords/thickness will have 0.0-1.0\n  let segRects = webToRects(web)\n\n  return { segRects, hiddenGroups }\n}\n\nfunction buildWeb(hierarchy: SegHierarchy): SegNode[] {\n  const { entriesByLevel } = hierarchy\n\n  const buildNode = cacheable(\n    (level: number, lateral: number) => level + ':' + lateral,\n    (level: number, lateral: number): SegNodeAndPressure => {\n      let siblingRange = findNextLevelSegs(hierarchy, level, lateral)\n      let nextLevelRes = buildNodes(siblingRange, buildNode)\n      let entry = entriesByLevel[level][lateral]\n\n      return [\n        { ...entry, nextLevelNodes: nextLevelRes[0] },\n        entry.thickness + nextLevelRes[1], // the pressure builds\n      ]\n    },\n  )\n\n  return buildNodes(\n    entriesByLevel.length\n      ? { level: 0, lateralStart: 0, lateralEnd: entriesByLevel[0].length }\n      : null,\n    buildNode,\n  )[0]\n}\n\nfunction buildNodes(\n  siblingRange: SegSiblingRange | null,\n  buildNode: (level: number, lateral: number) => SegNodeAndPressure,\n): [SegNode[], number] { // number is maxPressure\n  if (!siblingRange) {\n    return [[], 0]\n  }\n\n  let { level, lateralStart, lateralEnd } = siblingRange\n  let lateral = lateralStart\n  let pairs: SegNodeAndPressure[] = []\n\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral))\n    lateral += 1\n  }\n\n  pairs.sort(cmpDescPressures)\n\n  return [\n    pairs.map(extractNode),\n    pairs[0][1], // first item's pressure\n  ]\n}\n\nfunction cmpDescPressures(a: SegNodeAndPressure, b: SegNodeAndPressure) { // sort pressure high -> low\n  return b[1] - a[1]\n}\n\nfunction extractNode(a: SegNodeAndPressure): SegNode {\n  return a[0]\n}\n\nfunction findNextLevelSegs(hierarchy: SegHierarchy, subjectLevel: number, subjectLateral: number): SegSiblingRange | null {\n  let { levelCoords, entriesByLevel } = hierarchy\n  let subjectEntry = entriesByLevel[subjectLevel][subjectLateral]\n  let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness\n  let levelCnt = levelCoords.length\n  let level = subjectLevel\n\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1) ; // do nothing\n\n  for (; level < levelCnt; level += 1) {\n    let entries = entriesByLevel[level]\n    let entry: SegEntry\n    let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd)\n    let lateralStart = searchIndex[0] + searchIndex[1] // if exact match (which doesn't collide), go to next one\n    let lateralEnd = lateralStart\n\n    while ( // loop through entries that horizontally intersect\n      (entry = entries[lateralEnd]) && // but not past the whole seg list\n      entry.span.start < subjectEntry.span.end\n    ) { lateralEnd += 1 }\n\n    if (lateralStart < lateralEnd) {\n      return { level, lateralStart, lateralEnd }\n    }\n  }\n\n  return null\n}\n\nfunction stretchWeb(topLevelNodes: SegNode[], totalThickness: number): SegNode[] {\n  const stretchNode = cacheable(\n    (node: SegNode, startCoord: number, prevThickness: number) => buildEntryKey(node),\n    (node: SegNode, startCoord: number, prevThickness: number): [number, SegNode] => { // [startCoord, node]\n      let { nextLevelNodes, thickness } = node\n      let allThickness = thickness + prevThickness\n      let thicknessFraction = thickness / allThickness\n      let endCoord: number\n      let newChildren: SegNode[] = []\n\n      if (!nextLevelNodes.length) {\n        endCoord = totalThickness\n      } else {\n        for (let childNode of nextLevelNodes) {\n          if (endCoord === undefined) {\n            let res = stretchNode(childNode, startCoord, allThickness)\n            endCoord = res[0]\n            newChildren.push(res[1])\n          } else {\n            let res = stretchNode(childNode, endCoord, 0)\n            newChildren.push(res[1])\n          }\n        }\n      }\n\n      let newThickness = (endCoord - startCoord) * thicknessFraction\n      return [endCoord - newThickness, {\n        ...node,\n        thickness: newThickness,\n        nextLevelNodes: newChildren,\n      }]\n    },\n  )\n\n  return topLevelNodes.map((node: SegNode) => stretchNode(node, 0, 0)[1])\n}\n\n// not sorted in any particular order\nfunction webToRects(topLevelNodes: SegNode[]): SegWebRect[] {\n  let rects: SegWebRect[] = []\n\n  const processNode = cacheable(\n    (node: SegNode, levelCoord: number, stackDepth: number) => buildEntryKey(node),\n    (node: SegNode, levelCoord: number, stackDepth: number) => { // returns forwardPressure\n      let rect: SegWebRect = {\n        ...node,\n        levelCoord,\n        stackDepth,\n        stackForward: 0, // will assign after recursing\n      }\n      rects.push(rect)\n\n      return (\n        rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1\n      )\n    },\n  )\n\n  function processNodes(nodes: SegNode[], levelCoord: number, stackDepth: number) { // returns stackForward\n    let stackForward = 0\n    for (let node of nodes) {\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward)\n    }\n    return stackForward\n  }\n\n  processNodes(topLevelNodes, 0, 0)\n  return rects // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n\n// TODO: move to general util\n\nfunction cacheable<Args extends any[], Res>(\n  keyFunc: (...args: Args) => string,\n  workFunc: (...args: Args) => Res,\n): ((...args: Args) => Res) {\n  const cache: { [key: string]: Res } = {}\n\n  return (...args: Args) => {\n    let key = keyFunc(...args)\n    return (key in cache)\n      ? cache[key]\n      : (cache[key] = workFunc(...args))\n  }\n}\n","import {\n  SegSpan,\n  SegEntry,\n  SegEntryGroup,\n  DateMarker,\n} from '@fullcalendar/core/internal'\nimport { TimeColsSeg } from './TimeColsSeg.js'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords.js'\nimport { SegWebRect, buildPositioning } from './seg-web.js'\n\n// public interface\n// ------------------------------------------------------------------------------------------\n\nexport interface TimeColFgSegPlacement {\n  seg: TimeColsSeg\n  rect: SegWebRect | null\n}\n\nexport function computeSegVCoords(\n  segs: TimeColsSeg[],\n  colDate: DateMarker,\n  slatCoords: TimeColsSlatsCoords = null,\n  eventMinHeight: number = 0, // might be null/undefined :(\n): SegSpan[] {\n  let vcoords: SegSpan[] = []\n\n  if (slatCoords) {\n    for (let i = 0; i < segs.length; i += 1) {\n      let seg = segs[i]\n      let spanStart = slatCoords.computeDateTop(seg.start, colDate)\n      let spanEnd = Math.max(\n        spanStart + (eventMinHeight || 0), // :(\n        slatCoords.computeDateTop(seg.end, colDate),\n      )\n      vcoords.push({\n        start: Math.round(spanStart), // for barely-overlapping collisions\n        end: Math.round(spanEnd), //\n      })\n    }\n  }\n\n  return vcoords\n}\n\nexport function computeFgSegPlacements(\n  segs: TimeColsSeg[],\n  segVCoords: SegSpan[], // might not have for every seg\n  eventOrderStrict?: boolean,\n  eventMaxStack?: number,\n): { segPlacements: TimeColFgSegPlacement[], hiddenGroups: SegEntryGroup[] } {\n  let segInputs: SegEntry[] = []\n  let dumbSegs: TimeColsSeg[] = [] // segs without coords\n\n  for (let i = 0; i < segs.length; i += 1) {\n    let vcoords = segVCoords[i]\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords,\n      })\n    } else {\n      dumbSegs.push(segs[i])\n    }\n  }\n\n  let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack)\n  let segPlacements: TimeColFgSegPlacement[] = []\n\n  for (let segRect of segRects) {\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect,\n    })\n  }\n\n  for (let dumbSeg of dumbSegs) {\n    segPlacements.push({ seg: dumbSeg, rect: null })\n  }\n\n  return { segPlacements, hiddenGroups }\n}\n","import { StandardEvent, BaseComponent, MinimalEventProps, createFormatter } from '@fullcalendar/core/internal'\nimport { createElement } from '@fullcalendar/core/preact'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false,\n})\n\nexport interface TimeColEventProps extends MinimalEventProps {\n  isShort: boolean\n}\n\nexport class TimeColEvent extends BaseComponent<TimeColEventProps> {\n  render() {\n    return (\n      <StandardEvent\n        {...this.props}\n        elClasses={[\n          'fc-timegrid-event',\n          'fc-v-event',\n          this.props.isShort && 'fc-timegrid-event-short',\n        ]}\n        defaultTimeFormat={DEFAULT_TIME_FORMAT}\n      />\n    )\n  }\n}\n","import { CssDimValue } from '@fullcalendar/core'\nimport {\n  DateMarker, BaseComponent, EventSegUiInteractionState, Seg, getSegMeta,\n  DateRange, DayCellContainer, NowIndicatorContainer, BgEvent, renderFill, buildIsoString, computeEarliestSegStart,\n  DateProfile, buildEventRangeKey, sortEventSegs, memoize, SegEntryGroup, SegEntry, Dictionary, SegSpan, hasCustomDayCellContent,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n  Fragment,\n  Ref,\n} from '@fullcalendar/core/preact'\nimport { TimeColMoreLink } from './TimeColMoreLink.js'\nimport { TimeColsSeg } from './TimeColsSeg.js'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords.js'\nimport { SegWebRect } from './seg-web.js'\nimport { computeFgSegPlacements, computeSegVCoords } from './event-placement.js'\nimport { TimeColEvent } from './TimeColEvent.js'\n\nexport interface TimeColProps {\n  elRef?: Ref<HTMLTableCellElement>\n  dateProfile: DateProfile\n  date: DateMarker\n  nowDate: DateMarker\n  todayRange: DateRange\n  extraDataAttrs?: any\n  extraRenderProps?: any\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  fgEventSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  businessHourSegs: TimeColsSeg[]\n  nowIndicatorSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  slatCoords: TimeColsSlatsCoords\n  forPrint: boolean\n}\n\nexport class TimeCol extends BaseComponent<TimeColProps> {\n  sortEventSegs = memoize(sortEventSegs) as (typeof sortEventSegs)\n  // TODO: memoize event-placement?\n\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let isSelectMirror = options.selectMirror\n\n    let mirrorSegs: Seg[] = // yuck\n      (props.eventDrag && props.eventDrag.segs) ||\n      (props.eventResize && props.eventResize.segs) ||\n      (isSelectMirror && props.dateSelectionSegs) ||\n      []\n\n    let interactionAffectedInstances = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, options.eventOrder) as TimeColsSeg[]\n\n    return (\n      <DayCellContainer\n        elTag=\"td\"\n        elRef={props.elRef}\n        elClasses={[\n          'fc-timegrid-col',\n          ...(props.extraClassNames || []),\n        ]}\n        elAttrs={{\n          role: 'gridcell',\n          ...props.extraDataAttrs,\n        }}\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        extraRenderProps={props.extraRenderProps}\n      >\n        {(InnerContent) => (\n          <div className=\"fc-timegrid-col-frame\">\n            <div className=\"fc-timegrid-col-bg\">\n              {this.renderFillSegs(props.businessHourSegs, 'non-business')}\n              {this.renderFillSegs(props.bgEventSegs, 'bg-event')}\n              {this.renderFillSegs(props.dateSelectionSegs, 'highlight')}\n            </div>\n            <div className=\"fc-timegrid-col-events\">\n              {this.renderFgSegs(\n                sortedFgSegs,\n                interactionAffectedInstances,\n                false,\n                false,\n                false,\n              )}\n            </div>\n            <div className=\"fc-timegrid-col-events\">\n              {this.renderFgSegs(\n                mirrorSegs as TimeColsSeg[],\n                {},\n                Boolean(props.eventDrag),\n                Boolean(props.eventResize),\n                Boolean(isSelectMirror),\n              )}\n            </div>\n            <div className=\"fc-timegrid-now-indicator-container\">\n              {this.renderNowIndicator(props.nowIndicatorSegs)}\n            </div>\n            {hasCustomDayCellContent(options) && (\n              <InnerContent\n                elTag=\"div\"\n                elClasses={['fc-timegrid-col-misc']}\n              />\n            )}\n          </div>\n        )}\n      </DayCellContainer>\n    )\n  }\n\n  renderFgSegs(\n    sortedFgSegs: TimeColsSeg[],\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { props } = this\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props)\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting)\n  }\n\n  renderPositionedFgSegs(\n    segs: TimeColsSeg[], // if not mirror, needs to be sorted\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options\n    let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight)\n    let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack)\n\n    return (\n      <Fragment>\n        {this.renderHiddenGroups(hiddenGroups, segs)}\n        {segPlacements.map((segPlacement) => {\n          let { seg, rect } = segPlacement\n          let instanceId = seg.eventRange.instance.instanceId\n          let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect)\n          let vStyle = computeSegVStyle(rect && rect.span)\n          let hStyle = (!isMirror && rect) ? this.computeSegHStyle(rect) : { left: 0, right: 0 }\n          let isInset = Boolean(rect) && rect.stackForward > 0\n          let isShort = Boolean(rect) && (rect.span.end - rect.span.start) < eventShortHeight // look at other places for this problem\n\n          return (\n            <div\n              className={\n                'fc-timegrid-event-harness' +\n                (isInset ? ' fc-timegrid-event-harness-inset' : '')\n              }\n              key={instanceId}\n              style={{\n                visibility: isVisible ? ('' as any) : 'hidden',\n                ...vStyle,\n                ...hStyle,\n              }}\n            >\n              <TimeColEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                isShort={isShort}\n                {...getSegMeta(seg, todayRange, nowDate)}\n              />\n            </div>\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  // will already have eventMinHeight applied because segInputs already had it\n  renderHiddenGroups(hiddenGroups: SegEntryGroup[], segs: TimeColsSeg[]) {\n    let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props\n    return (\n      <Fragment>\n        {hiddenGroups.map((hiddenGroup) => {\n          let positionCss = computeSegVStyle(hiddenGroup.span)\n          let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs)\n          return (\n            <TimeColMoreLink\n              key={buildIsoString(computeEarliestSegStart(hiddenSegs))}\n              hiddenSegs={hiddenSegs}\n              top={positionCss.top}\n              bottom={positionCss.bottom}\n              extraDateSpan={extraDateSpan}\n              dateProfile={dateProfile}\n              todayRange={todayRange}\n              nowDate={nowDate}\n              eventSelection={eventSelection}\n              eventDrag={eventDrag}\n              eventResize={eventResize}\n            />\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  renderFillSegs(segs: TimeColsSeg[], fillType: string) {\n    let { props, context } = this\n    let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight) // don't assume all populated\n\n    let children = segVCoords.map((vcoords, i) => {\n      let seg = segs[i]\n      return (\n        <div\n          key={buildEventRangeKey(seg.eventRange)}\n          className=\"fc-timegrid-bg-harness\"\n          style={computeSegVStyle(vcoords)}\n        >\n          {fillType === 'bg-event' ?\n            <BgEvent seg={seg} {...getSegMeta(seg, props.todayRange, props.nowDate)} /> :\n            renderFill(fillType)}\n        </div>\n      )\n    })\n\n    return <Fragment>{children}</Fragment>\n  }\n\n  renderNowIndicator(segs: TimeColsSeg[]) {\n    let { slatCoords, date } = this.props\n\n    if (!slatCoords) { return null }\n\n    return segs.map((seg, i) => (\n      <NowIndicatorContainer\n        // key doesn't matter. will only ever be one\n        key={i} // eslint-disable-line react/no-array-index-key\n        elClasses={['fc-timegrid-now-indicator-line']}\n        elStyle={{\n          top: slatCoords.computeDateTop(seg.start, date),\n        }}\n        isAxis={false}\n        date={date}\n      />\n    ))\n  }\n\n  computeSegHStyle(segHCoords: SegWebRect) {\n    let { isRtl, options } = this.context\n    let shouldOverlap = options.slotEventOverlap\n    let nearCoord = segHCoords.levelCoord // the left side if LTR. the right side if RTL. floating-point\n    let farCoord = segHCoords.levelCoord + segHCoords.thickness // the right side if LTR. the left side if RTL. floating-point\n    let left // amount of space from left edge, a fraction of the total width\n    let right // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2)\n    }\n\n    if (isRtl) {\n      left = 1 - farCoord\n      right = nearCoord\n    } else {\n      left = nearCoord\n      right = 1 - farCoord\n    }\n\n    let props = {\n      zIndex: segHCoords.stackDepth + 1, // convert from 0-base to 1-based\n      left: left * 100 + '%',\n      right: right * 100 + '%',\n    }\n\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2 // 10 is a guesstimate of the icon's width\n    }\n\n    return props\n  }\n}\n\nexport function renderPlainFgSegs(\n  sortedFgSegs: TimeColsSeg[],\n  { todayRange, nowDate, eventSelection, eventDrag, eventResize }: {\n    todayRange: DateRange\n    nowDate: DateMarker\n    eventSelection: string\n    eventDrag: EventSegUiInteractionState | null\n    eventResize: EventSegUiInteractionState | null\n  },\n) {\n  let hiddenInstances =\n    (eventDrag ? eventDrag.affectedInstances : null) ||\n    (eventResize ? eventResize.affectedInstances : null) ||\n    {}\n  return (\n    <Fragment>\n      {sortedFgSegs.map((seg) => {\n        let instanceId = seg.eventRange.instance.instanceId\n        return (\n          <div\n            key={instanceId}\n            style={{ visibility: hiddenInstances[instanceId] ? 'hidden' : ('' as any) }}\n          >\n            <TimeColEvent\n              seg={seg}\n              isDragging={false}\n              isResizing={false}\n              isDateSelecting={false}\n              isSelected={instanceId === eventSelection}\n              isShort={false}\n              {...getSegMeta(seg, todayRange, nowDate)}\n            />\n          </div>\n        )\n      })}\n    </Fragment>\n  )\n}\n\nfunction computeSegVStyle(segVCoords: SegSpan | null): { top: CssDimValue, bottom: CssDimValue } {\n  if (!segVCoords) {\n    return { top: '', bottom: '' }\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end,\n  }\n}\n\nfunction compileSegsFromEntries(\n  segEntries: SegEntry[],\n  allSegs: TimeColsSeg[],\n): TimeColsSeg[] {\n  return segEntries.map((segEntry) => allSegs[segEntry.index])\n}\n","import { CssDimValue } from '@fullcalendar/core'\nimport {\n  BaseComponent,\n  EventSegUiInteractionState,\n  DateMarker,\n  RefMap,\n  PositionCache,\n  memoize,\n  DateRange,\n  NowIndicatorContainer,\n  DateProfile,\n  DayTableCell,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n  createRef,\n  VNode,\n} from '@fullcalendar/core/preact'\nimport { TimeColsSeg, splitSegsByCol, splitInteractionByCol } from './TimeColsSeg.js'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords.js'\nimport { TimeCol } from './TimeCol.js'\n\nexport interface TimeColsContentProps {\n  axis: boolean\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  nowIndicatorSegs: TimeColsSeg[]\n  clientWidth: number | null\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  slatCoords: TimeColsSlatsCoords\n  onColCoords?: (colCoords: PositionCache) => void\n  forPrint: boolean\n}\n\nexport class TimeColsContent extends BaseComponent<TimeColsContentProps> { // TODO: rename\n  private splitFgEventSegs = memoize(splitSegsByCol)\n  private splitBgEventSegs = memoize(splitSegsByCol)\n  private splitBusinessHourSegs = memoize(splitSegsByCol)\n  private splitNowIndicatorSegs = memoize(splitSegsByCol)\n  private splitDateSelectionSegs = memoize(splitSegsByCol)\n  private splitEventDrag = memoize(splitInteractionByCol)\n  private splitEventResize = memoize(splitInteractionByCol)\n  private rootElRef = createRef<HTMLDivElement>()\n  private cellElRefs = new RefMap<HTMLTableCellElement>()\n\n  render() {\n    let { props, context } = this\n    let nowIndicatorTop =\n      context.options.nowIndicator &&\n      props.slatCoords &&\n      props.slatCoords.safeComputeTop(props.nowDate) // might return void\n\n    let colCnt = props.cells.length\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt)\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt)\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt)\n\n    return (\n      <div className=\"fc-timegrid-cols\" ref={this.rootElRef}>\n        <table\n          role=\"presentation\"\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n          }}\n        >\n          {props.tableColGroupNode}\n          <tbody role=\"presentation\">\n            <tr role=\"row\">\n              {props.axis && (\n                <td aria-hidden className=\"fc-timegrid-col fc-timegrid-axis\">\n                  <div className=\"fc-timegrid-col-frame\">\n                    <div className=\"fc-timegrid-now-indicator-container\">\n                      {typeof nowIndicatorTop === 'number' && (\n                        <NowIndicatorContainer\n                          elClasses={['fc-timegrid-now-indicator-arrow']}\n                          elStyle={{ top: nowIndicatorTop }}\n                          isAxis\n                          date={props.nowDate}\n                        />\n                      )}\n                    </div>\n                  </div>\n                </td>\n              )}\n              {props.cells.map((cell, i) => (\n                <TimeCol\n                  key={cell.key}\n                  elRef={this.cellElRefs.createRef(cell.key)}\n                  dateProfile={props.dateProfile}\n                  date={cell.date}\n                  nowDate={props.nowDate}\n                  todayRange={props.todayRange}\n                  extraRenderProps={cell.extraRenderProps}\n                  extraDataAttrs={cell.extraDataAttrs}\n                  extraClassNames={cell.extraClassNames}\n                  extraDateSpan={cell.extraDateSpan}\n                  fgEventSegs={fgEventSegsByRow[i]}\n                  bgEventSegs={bgEventSegsByRow[i]}\n                  businessHourSegs={businessHourSegsByRow[i]}\n                  nowIndicatorSegs={nowIndicatorSegsByRow[i]}\n                  dateSelectionSegs={dateSelectionSegsByRow[i]}\n                  eventDrag={eventDragByRow[i]}\n                  eventResize={eventResizeByRow[i]}\n                  slatCoords={props.slatCoords}\n                  eventSelection={props.eventSelection}\n                  forPrint={props.forPrint}\n                />\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateCoords()\n  }\n\n  componentDidUpdate() {\n    this.updateCoords()\n  }\n\n  updateCoords() {\n    let { props } = this\n\n    if (\n      props.onColCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(\n        new PositionCache(\n          this.rootElRef.current,\n          collectCellEls(this.cellElRefs.currentMap, props.cells),\n          true, // horizontal\n          false,\n        ),\n      )\n    }\n  }\n}\n\nfunction collectCellEls(elMap: { [key: string]: HTMLElement }, cells: DayTableCell[]) {\n  return cells.map((cell) => elMap[cell.key])\n}\n","import { Duration, CssDimValue } from '@fullcalendar/core'\nimport {\n  addDurations,\n  multiplyDuration,\n  wholeDivideDurations,\n  DateMarker,\n  EventSegUiInteractionState,\n  memoize,\n  PositionCache,\n  ScrollResponder,\n  ScrollRequest,\n  DateRange,\n  DateProfile,\n  DayTableCell,\n  Hit,\n  DateComponent,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n  VNode,\n} from '@fullcalendar/core/preact'\nimport { TimeColsSlats } from './TimeColsSlats.js'\nimport { TimeSlatMeta } from './time-slat-meta.js'\nimport { TimeColsContent } from './TimeColsContent.js'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords.js'\nimport { TimeColsSeg } from './TimeColsSeg.js'\n\nexport interface TimeColsProps {\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  slotDuration: Duration\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  nowIndicatorSegs: TimeColsSeg[]\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\ninterface TimeColsState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\nexport class TimeCols extends DateComponent<TimeColsProps, TimeColsState> {\n  private processSlotOptions = memoize(processSlotOptions)\n  private scrollResponder: ScrollResponder\n  private colCoords: PositionCache\n\n  state = {\n    slatCoords: null,\n  }\n\n  render() {\n    let { props, state } = this\n\n    return (\n      <div\n        className=\"fc-timegrid-body\"\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <TimeColsSlats\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          slatMetas={props.slatMetas}\n          clientWidth={props.clientWidth}\n          minHeight={props.expandRows ? props.clientHeight : ''}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */}\n          onCoords={this.handleSlatCoords}\n        />\n        <TimeColsContent\n          cells={props.cells}\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          businessHourSegs={props.businessHourSegs}\n          bgEventSegs={props.bgEventSegs}\n          fgEventSegs={props.fgEventSegs}\n          dateSelectionSegs={props.dateSelectionSegs}\n          eventSelection={props.eventSelection}\n          eventDrag={props.eventDrag}\n          eventResize={props.eventResize}\n          todayRange={props.todayRange}\n          nowDate={props.nowDate}\n          nowIndicatorSegs={props.nowIndicatorSegs}\n          clientWidth={props.clientWidth}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.tableColGroupNode}\n          slatCoords={state.slatCoords}\n          onColCoords={this.handleColCoords}\n          forPrint={props.forPrint}\n        />\n      </div>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement | null) => {\n    if (el) {\n      this.context.registerInteractiveComponent(this, {\n        el,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest)\n  }\n\n  componentDidUpdate(prevProps: TimeColsProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile)\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach()\n  }\n\n  handleScrollRequest = (request: ScrollRequest) => {\n    let { onScrollTopRequest } = this.props\n    let { slatCoords } = this.state\n\n    if (onScrollTopRequest && slatCoords) {\n      if (request.time) {\n        let top = slatCoords.computeTimeTop(request.time)\n        top = Math.ceil(top) // zoom can give weird floating-point values. rather scroll a little bit further\n        if (top) {\n          top += 1 // to overcome top border that slots beyond the first have. looks better\n        }\n\n        onScrollTopRequest(top)\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  handleColCoords = (colCoords: PositionCache | null) => {\n    this.colCoords = colCoords\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords | null) => {\n    this.setState({ slatCoords })\n\n    if (this.props.onSlatCoords) {\n      this.props.onSlatCoords(slatCoords)\n    }\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { dateEnv, options } = this.context\n    let { colCoords } = this\n    let { dateProfile } = this.props\n    let { slatCoords } = this.state\n    let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration)\n\n    let colIndex = colCoords.leftToIndex(positionLeft)\n    let slatIndex = slatCoords.positions.topToIndex(positionTop)\n\n    if (colIndex != null && slatIndex != null) {\n      let cell = this.props.cells[colIndex]\n      let slatTop = slatCoords.positions.tops[slatIndex]\n      let slatHeight = slatCoords.positions.getHeight(slatIndex)\n      let partial = (positionTop - slatTop) / slatHeight // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot) // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex\n\n      let dayDate = this.props.cells[colIndex].date\n      let time = addDurations(\n        dateProfile.slotMinTime,\n        multiplyDuration(snapDuration, snapIndex),\n      )\n\n      let start = dateEnv.add(dayDate, time)\n      let end = dateEnv.add(start, snapDuration)\n\n      return {\n        dateProfile,\n        dateSpan: {\n          range: { start, end },\n          allDay: false,\n          ...cell.extraDateSpan,\n        },\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight,\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n}\n\nfunction processSlotOptions(slotDuration: Duration, snapDurationOverride: Duration | null) {\n  let snapDuration = snapDurationOverride || slotDuration\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration)\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration\n    snapsPerSlot = 1\n    // TODO: say warning?\n  }\n\n  return { snapDuration, snapsPerSlot }\n}\n","import { intersectRanges, DateRange, Slicer } from '@fullcalendar/core/internal'\nimport { TimeColsSeg } from './TimeColsSeg.js'\n\nexport class DayTimeColsSlicer extends Slicer<TimeColsSeg, [DateRange[]]> {\n  sliceRange(range: DateRange, dayRanges: DateRange[]): TimeColsSeg[] {\n    let segs: TimeColsSeg[] = []\n\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col])\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col,\n        })\n      }\n    }\n\n    return segs\n  }\n}\n","import { Duration, CssDimValue } from '@fullcalendar/core'\nimport {\n  DateComponent,\n  DateProfile,\n  EventStore,\n  EventUiHash,\n  EventInteractionState,\n  DateSpan,\n  memoize,\n  DateRange,\n  DayTableModel,\n  DateEnv,\n  DateMarker,\n  NowTimer,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n  createRef,\n  VNode,\n} from '@fullcalendar/core/preact'\nimport { TimeCols } from './TimeCols.js'\nimport { TimeSlatMeta } from './time-slat-meta.js'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords.js'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer.js'\n\nexport interface DayTimeColsProps {\n  dateProfile: DateProfile\n  dayTableModel: DayTableModel\n  axis: boolean\n  slotDuration: Duration\n  slatMetas: TimeSlatMeta[]\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\nexport class DayTimeCols extends DateComponent<DayTimeColsProps> {\n  private buildDayRanges = memoize(buildDayRanges)\n  private slicer = new DayTimeColsSlicer()\n  private timeColsRef = createRef<TimeCols>()\n\n  render() {\n    let { props, context } = this\n    let { dateProfile, dayTableModel } = props\n\n    let isNowIndicator = context.options.nowIndicator\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv)\n\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return (\n      <NowTimer unit={isNowIndicator ? 'minute' : 'day'}>\n        {(nowDate: DateMarker, todayRange: DateRange) => (\n          <TimeCols\n            ref={this.timeColsRef}\n            {...this.slicer.sliceProps(props, dateProfile, null, context, dayRanges)}\n            forPrint={props.forPrint}\n            axis={props.axis}\n            dateProfile={dateProfile}\n            slatMetas={props.slatMetas}\n            slotDuration={props.slotDuration}\n            cells={dayTableModel.cells[0]}\n            tableColGroupNode={props.tableColGroupNode}\n            tableMinWidth={props.tableMinWidth}\n            clientWidth={props.clientWidth}\n            clientHeight={props.clientHeight}\n            expandRows={props.expandRows}\n            nowDate={nowDate}\n            nowIndicatorSegs={isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges)}\n            todayRange={todayRange}\n            onScrollTopRequest={props.onScrollTopRequest}\n            onSlatCoords={props.onSlatCoords}\n          />\n        )}\n      </NowTimer>\n    )\n  }\n}\n\nexport function buildDayRanges(dayTableModel: DayTableModel, dateProfile: DateProfile, dateEnv: DateEnv): DateRange[] {\n  let ranges: DateRange[] = []\n\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime),\n    })\n  }\n\n  return ranges\n}\n","import { Duration } from '@fullcalendar/core'\nimport {\n  createDuration,\n  asRoughMs,\n  formatIsoTimeString,\n  addDurations,\n  wholeDivideDurations,\n  DateMarker,\n  DateEnv,\n} from '@fullcalendar/core/internal'\n\nexport interface TimeSlatMeta {\n  date: DateMarker\n  time: Duration\n  key: string\n  isoTimeStr: string\n  isLabeled: boolean\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n  { hours: 1 },\n  { minutes: 30 },\n  { minutes: 15 },\n  { seconds: 30 },\n  { seconds: 15 },\n]\n\nexport function buildSlatMetas(\n  slotMinTime: Duration,\n  slotMaxTime: Duration,\n  explicitLabelInterval: Duration | null,\n  slotDuration: Duration,\n  dateEnv: DateEnv,\n) {\n  let dayStart = new Date(0)\n  let slatTime = slotMinTime\n  let slatIterator = createDuration(0)\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration)\n  let metas: TimeSlatMeta[] = []\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime)\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null\n\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(), // we can't use the isoTimeStr for uniqueness when minTime/maxTime beyone 0h/24h\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled,\n    })\n\n    slatTime = addDurations(slatTime, slotDuration)\n    slatIterator = addDurations(slatIterator, slotDuration)\n  }\n\n  return metas\n}\n\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i\n  let labelInterval\n  let slotsPerLabel\n\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i])\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration)\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval\n    }\n  }\n\n  return slotDuration // fall back\n}\n","import {\n  DateProfileGenerator,\n  DateProfile,\n  DayHeader,\n  DaySeriesModel,\n  DayTableModel,\n  memoize,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/core/internal'\nimport {\n  createElement,\n} from '@fullcalendar/core/preact'\nimport { DayTable } from '@fullcalendar/daygrid/internal'\nimport { TimeColsView } from './TimeColsView.js'\nimport { DayTimeCols } from './DayTimeCols.js'\nimport { buildSlatMetas } from './time-slat-meta.js'\n\nexport class DayTimeColsView extends TimeColsView {\n  private buildTimeColsModel = memoize(buildTimeColsModel)\n  private buildSlatMetas = memoize(buildSlatMetas)\n\n  render() {\n    let { options, dateEnv, dateProfileGenerator } = this.context\n    let { props } = this\n    let { dateProfile } = props\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator)\n    let splitProps = this.allDaySplitter.splitProps(props)\n    let slatMetas = this.buildSlatMetas(\n      dateProfile.slotMinTime,\n      dateProfile.slotMaxTime,\n      options.slotLabelInterval,\n      options.slotDuration,\n      dateEnv,\n    )\n    let { dayMinWidth } = options\n    let hasAttachedAxis = !dayMinWidth\n    let hasDetachedAxis = dayMinWidth\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        dates={dayTableModel.headerDates}\n        dateProfile={dateProfile}\n        datesRepDistinctDays\n        renderIntro={hasAttachedAxis ? this.renderHeadAxis : null}\n      />\n    )\n\n    let allDayContent = (options.allDaySlot !== false) && ((contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        {...splitProps.allDay}\n        dateProfile={dateProfile}\n        dayTableModel={dayTableModel}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        renderRowIntro={hasAttachedAxis ? this.renderTableRowAxis : null}\n        showWeekNumbers={false}\n        expandRows={false}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n        {...this.getAllDayMaxEventProps()}\n      />\n    ))\n\n    let timeGridContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTimeCols\n        {...splitProps.timed}\n        dayTableModel={dayTableModel}\n        dateProfile={dateProfile}\n        axis={hasAttachedAxis}\n        slotDuration={options.slotDuration}\n        slatMetas={slatMetas}\n        forPrint={props.forPrint}\n        tableColGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        onSlatCoords={this.handleSlatCoords}\n        expandRows={contentArg.expandRows}\n        onScrollTopRequest={this.handleScrollTopRequest}\n      />\n    )\n\n    return hasDetachedAxis\n      ? this.renderHScrollLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n        dayTableModel.colCnt,\n        dayMinWidth,\n        slatMetas,\n        this.state.slatCoords,\n      )\n      : this.renderSimpleLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n      )\n  }\n}\n\nexport function buildTimeColsModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(daySeries, false)\n}\n"],"names":[],"mappings":"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"}