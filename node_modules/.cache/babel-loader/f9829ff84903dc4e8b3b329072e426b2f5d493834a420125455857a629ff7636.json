{"ast":null,"code":"import APIService from \"../../helpers/ApiService\";\n/* eslint-disable */\nexport const state = {\n  currentUser: sessionStorage.getItem('authUser')\n};\nexport const mutations = {\n  SET_CURRENT_USER(state, newValue) {\n    state.currentUser = newValue;\n    saveState('auth.currentUser', newValue);\n  }\n};\nexport const getters = {\n  loggedIn(state) {\n    return !!state.currentUser;\n  }\n};\nexport const actions = {\n  init({\n    state,\n    dispatch\n  }) {\n    dispatch('validate');\n  },\n  // Logs in the current user.\n  logIn({\n    commit,\n    dispatch,\n    getters\n  }, {\n    username,\n    password\n  } = {}) {\n    if (getters.loggedIn) return dispatch('validate');\n    return APIService.post(username, password).then(response => {\n      const user = response;\n      commit('SET_CURRENT_USER', user);\n      return user;\n    });\n  },\n  // Logs out the current user.\n  logOut({\n    commit\n  }) {\n    // eslint-disable-next-line no-unused-vars\n    commit('SET_CURRENT_USER', null);\n    return new Promise((resolve, reject) => {\n      // eslint-disable-next-line no-unused-vars\n      // APIService.logout().then((response) => {\n      //     resolve(true);\n      // }).catch((error) => {\n      //     reject(this._handleError(error));\n      // })\n    });\n  }\n\n  // register the user\n  // register({ commit, dispatch, getters }, { username, email, password } = {}) {\n  //     if (getters.loggedIn) return dispatch('validate')\n\n  //     return getFirebaseBackend().registerUser(username, email, password).then((response) => {\n  //         const user = response\n  //         commit('SET_CURRENT_USER', user)\n  //         return user\n  //     });\n  // },\n\n  // register the user\n  // eslint-disable-next-line no-unused-vars\n  // resetPassword({ commit, dispatch, getters }, { email } = {}) {\n  //     if (getters.loggedIn) return dispatch('validate')\n\n  //     return getFirebaseBackend().forgetPassword(email).then((response) => {\n  //         const message = response.data\n  //         return message\n  //     });\n  // },\n\n  // Validates the current user's token and refreshes it\n  // with new data from the API.\n  // eslint-disable-next-line no-unused-vars\n  // validate({ commit, state }) {\n  //     if (!state.currentUser) return Promise.resolve(null)\n  //     const user = APIService().getAuthenticatedUser();\n  //     commit('SET_CURRENT_USER', user)\n  //     return user;\n  // },\n};\n\n// ===\n// Private helpers\n// ===\n\nfunction saveState(key, state) {\n  window.sessionStorage.setItem(key, JSON.stringify(state));\n}","map":{"version":3,"names":["APIService","state","currentUser","sessionStorage","getItem","mutations","SET_CURRENT_USER","newValue","saveState","getters","loggedIn","actions","init","dispatch","logIn","commit","username","password","post","then","response","user","logOut","Promise","resolve","reject","key","window","setItem","JSON","stringify"],"sources":["C:/Users/Admin/Desktop/DoAnClient/client/src/state/modules/auth.js"],"sourcesContent":["import APIService from \"../../helpers/ApiService\"\r\n/* eslint-disable */\r\nexport const state = {\r\n    currentUser: sessionStorage.getItem('authUser'),\r\n}\r\n\r\nexport const mutations = {\r\n    SET_CURRENT_USER(state, newValue) {\r\n        state.currentUser = newValue\r\n        saveState('auth.currentUser', newValue)\r\n    }\r\n}\r\n\r\nexport const getters = {\r\n    loggedIn(state) {\r\n        return !!state.currentUser\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    init({ state, dispatch }) {\r\n        dispatch('validate')\r\n    },\r\n\r\n    // Logs in the current user.\r\n    logIn({ commit, dispatch, getters }, { username, password } = {}) {\r\n        if (getters.loggedIn) return dispatch('validate')\r\n\r\n        return APIService.post(username, password).then((response) => {\r\n            const user = response\r\n            commit('SET_CURRENT_USER', user)\r\n            return user\r\n        });\r\n    },\r\n\r\n    // Logs out the current user.\r\n    logOut({ commit }) {\r\n        // eslint-disable-next-line no-unused-vars\r\n        commit('SET_CURRENT_USER', null)\r\n        return new Promise((resolve, reject) => {\r\n            // eslint-disable-next-line no-unused-vars\r\n            // APIService.logout().then((response) => {\r\n            //     resolve(true);\r\n            // }).catch((error) => {\r\n            //     reject(this._handleError(error));\r\n            // })\r\n        });\r\n    },\r\n\r\n    // register the user\r\n    // register({ commit, dispatch, getters }, { username, email, password } = {}) {\r\n    //     if (getters.loggedIn) return dispatch('validate')\r\n\r\n    //     return getFirebaseBackend().registerUser(username, email, password).then((response) => {\r\n    //         const user = response\r\n    //         commit('SET_CURRENT_USER', user)\r\n    //         return user\r\n    //     });\r\n    // },\r\n\r\n    // register the user\r\n    // eslint-disable-next-line no-unused-vars\r\n    // resetPassword({ commit, dispatch, getters }, { email } = {}) {\r\n    //     if (getters.loggedIn) return dispatch('validate')\r\n\r\n    //     return getFirebaseBackend().forgetPassword(email).then((response) => {\r\n    //         const message = response.data\r\n    //         return message\r\n    //     });\r\n    // },\r\n\r\n    // Validates the current user's token and refreshes it\r\n    // with new data from the API.\r\n    // eslint-disable-next-line no-unused-vars\r\n    // validate({ commit, state }) {\r\n    //     if (!state.currentUser) return Promise.resolve(null)\r\n    //     const user = APIService().getAuthenticatedUser();\r\n    //     commit('SET_CURRENT_USER', user)\r\n    //     return user;\r\n    // },\r\n}\r\n\r\n// ===\r\n// Private helpers\r\n// ===\r\n\r\nfunction saveState(key, state) {\r\n    window.sessionStorage.setItem(key, JSON.stringify(state))\r\n}\r\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD;AACA,OAAO,MAAMC,KAAK,GAAG;EACjBC,WAAW,EAAEC,cAAc,CAACC,OAAO,CAAC,UAAU;AAClD,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG;EACrBC,gBAAgBA,CAACL,KAAK,EAAEM,QAAQ,EAAE;IAC9BN,KAAK,CAACC,WAAW,GAAGK,QAAQ;IAC5BC,SAAS,CAAC,kBAAkB,EAAED,QAAQ,CAAC;EAC3C;AACJ,CAAC;AAED,OAAO,MAAME,OAAO,GAAG;EACnBC,QAAQA,CAACT,KAAK,EAAE;IACZ,OAAO,CAAC,CAACA,KAAK,CAACC,WAAW;EAC9B;AACJ,CAAC;AAED,OAAO,MAAMS,OAAO,GAAG;EACnBC,IAAIA,CAAC;IAAEX,KAAK;IAAEY;EAAS,CAAC,EAAE;IACtBA,QAAQ,CAAC,UAAU,CAAC;EACxB,CAAC;EAED;EACAC,KAAKA,CAAC;IAAEC,MAAM;IAAEF,QAAQ;IAAEJ;EAAQ,CAAC,EAAE;IAAEO,QAAQ;IAAEC;EAAS,CAAC,GAAG,CAAC,CAAC,EAAE;IAC9D,IAAIR,OAAO,CAACC,QAAQ,EAAE,OAAOG,QAAQ,CAAC,UAAU,CAAC;IAEjD,OAAOb,UAAU,CAACkB,IAAI,CAACF,QAAQ,EAAEC,QAAQ,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;MAC1D,MAAMC,IAAI,GAAGD,QAAQ;MACrBL,MAAM,CAAC,kBAAkB,EAAEM,IAAI,CAAC;MAChC,OAAOA,IAAI;IACf,CAAC,CAAC;EACN,CAAC;EAED;EACAC,MAAMA,CAAC;IAAEP;EAAO,CAAC,EAAE;IACf;IACAA,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC;IAChC,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC;MACA;MACA;MACA;MACA;MACA;IAAA,CACH,CAAC;EACN;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;;AAED;AACA;AACA;;AAEA,SAASjB,SAASA,CAACkB,GAAG,EAAEzB,KAAK,EAAE;EAC3B0B,MAAM,CAACxB,cAAc,CAACyB,OAAO,CAACF,GAAG,EAAEG,IAAI,CAACC,SAAS,CAAC7B,KAAK,CAAC,CAAC;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}